Index: chess/src/network/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package network;\r\n\r\nimport java.io.*;\r\nimport java.net.*;\r\nimport java.util.*;\r\npublic class Server {\r\n    private static final int PORT = 12345;\r\n    private static final Map<String, GameRoom> rooms = new HashMap<>(); // Quản lý các phòng chơi\r\n    private static final Queue<ClientHandler> waitingClients = new LinkedList<>(); // Hàng đợi tìm đối thủ\r\n\r\n    public static void main(String[] args) {\r\n        try (ServerSocket serverSocket = new ServerSocket(PORT)) {\r\n            System.out.println(\"Server is running...\");\r\n\r\n            while (true) {\r\n                Socket clientSocket = serverSocket.accept();\r\n                System.out.println(\"New client connected: \" + clientSocket);\r\n                ClientHandler clientHandler = new ClientHandler(clientSocket);\r\n                new Thread(clientHandler).start();\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Tìm đối thủ và tạo phòng chơi\r\n    public static synchronized void findOpponent(ClientHandler client) {\r\n        if (waitingClients.isEmpty()) {\r\n            waitingClients.add(client); // Thêm client vào hàng đợi\r\n            client.sendMessage(\"WAIT_FOR_OPPONENT\");\r\n        } else {\r\n            ClientHandler opponent = waitingClients.poll(); // Ghép cặp với đối thủ\r\n            String roomId = UUID.randomUUID().toString(); // Tạo ID phòng duy nhất\r\n            GameRoom room = new GameRoom(roomId, client, opponent);\r\n            rooms.put(roomId, room);\r\n\r\n            // Thông báo cho cả hai client\r\n            client.setRoom(room);\r\n            opponent.setRoom(room);\r\n            client.sendMessage(\"GAME_START \" + roomId);\r\n            opponent.sendMessage(\"GAME_START \" + roomId);\r\n        }\r\n    }\r\n\r\n    // Xử lý nước đi\r\n    public static synchronized void handleMove(String roomId, String move, ClientHandler sender) {\r\n        GameRoom room = rooms.get(roomId);\r\n        if (room != null) {\r\n            room.broadcastMove(move, sender); // Gửi nước đi cho đối thủ\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/chess/src/network/Server.java b/chess/src/network/Server.java
--- a/chess/src/network/Server.java	(revision 2eec871257fd967b5c992676c543162b21b2392f)
+++ b/chess/src/network/Server.java	(date 1731520796953)
@@ -3,6 +3,7 @@
 import java.io.*;
 import java.net.*;
 import java.util.*;
+
 public class Server {
     private static final int PORT = 12345;
     private static final Map<String, GameRoom> rooms = new HashMap<>(); // Quản lý các phòng chơi
@@ -13,8 +14,11 @@
             System.out.println("Server is running...");
 
             while (true) {
+                // Chấp nhận kết nối từ client
                 Socket clientSocket = serverSocket.accept();
                 System.out.println("New client connected: " + clientSocket);
+
+                // Tạo ClientHandler cho mỗi client kết nối và chạy trong một luồng riêng biệt
                 ClientHandler clientHandler = new ClientHandler(clientSocket);
                 new Thread(clientHandler).start();
             }
@@ -25,20 +29,27 @@
 
     // Tìm đối thủ và tạo phòng chơi
     public static synchronized void findOpponent(ClientHandler client) {
-        if (waitingClients.isEmpty()) {
-            waitingClients.add(client); // Thêm client vào hàng đợi
-            client.sendMessage("WAIT_FOR_OPPONENT");
-        } else {
-            ClientHandler opponent = waitingClients.poll(); // Ghép cặp với đối thủ
+        System.out.println("Searching for opponent for client: " + client);  // Log khi server bắt đầu tìm đối thủ
+
+        // Nếu có client khác trong hàng đợi, ghép cặp ngay
+        if (!waitingClients.isEmpty()) {
+            // Lấy đối thủ từ hàng đợi
+            ClientHandler opponent = waitingClients.poll();
             String roomId = UUID.randomUUID().toString(); // Tạo ID phòng duy nhất
             GameRoom room = new GameRoom(roomId, client, opponent);
             rooms.put(roomId, room);
 
-            // Thông báo cho cả hai client
+            // Thông báo cho cả hai client về phòng chơi và bắt đầu trò chơi
             client.setRoom(room);
             opponent.setRoom(room);
             client.sendMessage("GAME_START " + roomId);
             opponent.sendMessage("GAME_START " + roomId);
+            System.out.println("Game started in room: " + roomId);  // Log khi phòng được tạo và trò chơi bắt đầu
+        } else {
+            // Nếu không có đối thủ, thêm vào hàng đợi
+            waitingClients.add(client);
+            client.sendMessage("WAIT_FOR_OPPONENT");
+            System.out.println("Client added to waiting list: " + client);
         }
     }
 
@@ -46,11 +57,19 @@
     public static synchronized void handleMove(String roomId, String move, ClientHandler sender) {
         GameRoom room = rooms.get(roomId);
         if (room != null) {
-            room.broadcastMove(move, sender); // Gửi nước đi cho đối thủ
+            // Kiểm tra xem có phải lượt của người chơi không
+            if ((sender == room.getPlayer1() && room.isPlayer1Turn()) ||
+                    (sender == room.getPlayer2() && !room.isPlayer1Turn())) {
+
+                // Xử lý nước đi và gửi cho đối thủ
+                room.broadcastMove(move, sender);  // Gửi nước đi cho đối thủ
+
+                // Đổi lượt cho người chơi
+                room.switchTurn();
+            } else {
+                // Gửi thông báo yêu cầu chờ lượt
+                sender.sendMessage("WAIT_FOR_YOUR_TURN");
+            }
         }
     }
 }
-
-
-
-
Index: chess/src/network/GameRoom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package network;\r\n\r\npublic class GameRoom {\r\n    private final String id;\r\n    private final ClientHandler player1;\r\n    private final ClientHandler player2;\r\n\r\n    public GameRoom(String id, ClientHandler player1, ClientHandler player2) {\r\n        this.id = id;\r\n        this.player1 = player1;\r\n        this.player2 = player2;\r\n    }\r\n\r\n    public void broadcastMove(String move, ClientHandler sender) {\r\n        ClientHandler recipient = (sender == player1) ? player2 : player1;\r\n        if (recipient != null) {\r\n            recipient.sendMessage(\"MOVE \" + move); // Gửi nước đi cho đối thủ\r\n        }\r\n    }\r\n    public String getId() {\r\n        return id;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/chess/src/network/GameRoom.java b/chess/src/network/GameRoom.java
--- a/chess/src/network/GameRoom.java	(revision 2eec871257fd967b5c992676c543162b21b2392f)
+++ b/chess/src/network/GameRoom.java	(date 1731519431778)
@@ -4,20 +4,61 @@
     private final String id;
     private final ClientHandler player1;
     private final ClientHandler player2;
+    private boolean isPlayer1Turn; // Biến theo dõi lượt đi của player1
 
     public GameRoom(String id, ClientHandler player1, ClientHandler player2) {
         this.id = id;
         this.player1 = player1;
         this.player2 = player2;
+        this.isPlayer1Turn = true; // Player 1 đi trước
     }
 
+    // Phương thức gửi nước đi cho đối thủ
     public void broadcastMove(String move, ClientHandler sender) {
-        ClientHandler recipient = (sender == player1) ? player2 : player1;
-        if (recipient != null) {
-            recipient.sendMessage("MOVE " + move); // Gửi nước đi cho đối thủ
+        // Kiểm tra lượt đi có hợp lệ không
+        if ((sender == player1 && isPlayer1Turn) || (sender == player2 && !isPlayer1Turn)) {
+            ClientHandler recipient = (sender == player1) ? player2 : player1;
+            if (recipient != null) {
+                recipient.sendMessage("MOVE " + move); // Gửi nước đi cho đối thủ
+                System.out.println("Broadcasting move to opponent: " + move);  // Log việc gửi nước đi
+            }
+            // Đổi lượt sau khi phát sóng nước đi
+            switchTurn();
+        } else {
+            // Nếu người chơi đi sai lượt
+            sender.sendMessage("WAIT_FOR_YOUR_TURN");
         }
     }
+
+    // Phương thức bắt đầu game và thông báo màu quân
+    public void startGame() {
+        // Gửi thông báo bắt đầu game và phân chia quân
+        player1.sendMessage("GAME_START RED");
+        player2.sendMessage("GAME_START BLACK");
+    }
+
+    // Kiểm tra xem có phải lượt của player1 không
+    public boolean isPlayer1Turn() {
+        return isPlayer1Turn;
+    }
+
+    // Chuyển lượt giữa 2 người chơi
+    public void switchTurn() {
+        isPlayer1Turn = !isPlayer1Turn; // Đổi lượt cho người chơi
+    }
+
+    // Trả về ID của phòng
     public String getId() {
         return id;
     }
+
+    // Phương thức getter cho player1
+    public ClientHandler getPlayer1() {
+        return player1;
+    }
+
+    // Phương thức getter cho player2
+    public ClientHandler getPlayer2() {
+        return player2;
+    }
 }
Index: chess/src/network/ClientHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package network;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.net.Socket;\r\n\r\npublic class ClientHandler implements Runnable{\r\n    private Socket socket;\r\n    private PrintWriter out;\r\n    private BufferedReader in;\r\n    private GameRoom room;\r\n\r\n    public ClientHandler(Socket socket) {\r\n        this.socket = socket;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r\n            out = new PrintWriter(socket.getOutputStream(), true);\r\n\r\n            String message;\r\n            while ((message = in.readLine()) != null) {\r\n                if (message.equals(\"FIND_OPPONENT\")) {\r\n                    Server.findOpponent(this); // Tìm đối thủ\r\n                } else if (message.startsWith(\"MOVE\")) {\r\n                    System.out.println(message);\r\n                    if (room != null) {\r\n                        room.broadcastMove(message, this); // Chuyển nước đi cho đối thủ\r\n                    }\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            try {\r\n                socket.close();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void sendMessage(String message) {\r\n        if (out != null) {\r\n            out.println(message);\r\n        }\r\n    }\r\n    private void handleMove(String message) {\r\n        if (room != null) {\r\n            String move = message.substring(5); // Bỏ \"MOVE \"\r\n            room.broadcastMove(move, this);    // Gửi nước đi tới đối thủ\r\n        }\r\n    }\r\n    public void setRoom(GameRoom room) {\r\n        this.room = room;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/chess/src/network/ClientHandler.java b/chess/src/network/ClientHandler.java
--- a/chess/src/network/ClientHandler.java	(revision 2eec871257fd967b5c992676c543162b21b2392f)
+++ b/chess/src/network/ClientHandler.java	(date 1731521297719)
@@ -6,7 +6,7 @@
 import java.io.PrintWriter;
 import java.net.Socket;
 
-public class ClientHandler implements Runnable{
+public class ClientHandler implements Runnable {
     private Socket socket;
     private PrintWriter out;
     private BufferedReader in;
@@ -19,18 +19,24 @@
     @Override
     public void run() {
         try {
+            // Khởi tạo các luồng vào ra
             in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             out = new PrintWriter(socket.getOutputStream(), true);
 
             String message;
             while ((message = in.readLine()) != null) {
+                System.out.println("Received message from client: " + message);  // Log message nhận từ client
+
+                // Phân loại thông điệp và xử lý tương ứng
                 if (message.equals("FIND_OPPONENT")) {
+                    System.out.println("Finding opponent for client: " + socket.getInetAddress());  // Log khi client yêu cầu tìm đối thủ
                     Server.findOpponent(this); // Tìm đối thủ
                 } else if (message.startsWith("MOVE")) {
-                    System.out.println(message);
-                    if (room != null) {
-                        room.broadcastMove(message, this); // Chuyển nước đi cho đối thủ
-                    }
+                    System.out.println("Move received: " + message);  // Log nước đi nhận được từ client
+                    handleMove(message);  // Xử lý nước đi
+                } else {
+                    // Nếu thông điệp không hợp lệ, gửi thông báo lỗi
+                    sendMessage("INVALID_COMMAND");
                 }
             }
         } catch (IOException e) {
@@ -38,25 +44,53 @@
         } finally {
             try {
                 socket.close();
+                System.out.println("Client disconnected: " + socket.getInetAddress());  // Log khi client ngắt kết nối
             } catch (IOException e) {
                 e.printStackTrace();
             }
         }
     }
 
+    // Phương thức gửi thông điệp cho client
     public void sendMessage(String message) {
         if (out != null) {
             out.println(message);
+            System.out.println("Sent message to client: " + message);  // Log thông báo gửi đến client
         }
     }
-    private void handleMove(String message) {
-        if (room != null) {
-            String move = message.substring(5); // Bỏ "MOVE "
-            room.broadcastMove(move, this);    // Gửi nước đi tới đối thủ
-        }
-    }
+
+    // Gán phòng cho client
     public void setRoom(GameRoom room) {
         this.room = room;
+        System.out.println("Client assigned to room: " + room.getId());  // Log khi client được gán phòng
+    }
+
+    // Trả về phòng mà client tham gia
+    public GameRoom getRoom() {
+        return room;
     }
-}
+
+    // Kiểm tra xem client có phải là player 1 trong phòng không
+    public boolean isPlayer1() {
+        return this == room.getPlayer1();
+    }
 
+    // Xử lý nước đi từ client
+    private void handleMove(String message) {
+        if (room != null && room.isPlayer1Turn() == (this == room.getPlayer1())) {
+            String move = message.substring(5);  // Lấy nước đi sau từ khóa "MOVE "
+
+            try {
+                // Gửi nước đi tới đối thủ và đổi lượt cho người chơi
+                room.broadcastMove(move, this);
+                room.switchTurn();  // Đổi lượt cho người chơi
+                System.out.println("Move handled: " + move);  // Log khi nước đi được xử lý
+            } catch (Exception e) {
+                e.printStackTrace();  // In lỗi nếu có
+            }
+        } else {
+            // Nếu không phải lượt của client, gửi thông báo lỗi
+            sendMessage("NOT_YOUR_TURN");
+        }
+    }
+}
Index: chess/src/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.io.*;\r\nimport java.net.*;\r\npublic class Client {\r\n    private static final String SERVER_ADDRESS = \"localhost\";\r\n    private static final int PORT = 12345;\r\n    private StartWindow startWindow;\r\n    private PrintWriter out; // Khai báo biến out\r\n    private Runnable onOpponentFound;\r\n    private Main main;\r\n    private String roomId;\r\n\r\n\r\n    public static void main(String[] args) {\r\n        Client client = new Client();\r\n\r\n        client.start();\r\n    }\r\n\r\n\r\n\r\n    private void start() {\r\n        try (Socket socket = new Socket(SERVER_ADDRESS, PORT);\r\n             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r\n             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\r\n             BufferedReader console = new BufferedReader(new InputStreamReader(System.in))) {\r\n\r\n            // Gán giá trị cho biến out\r\n            this.out = out;\r\n\r\n            // Mở cửa sổ StartWindow khi kết nối thành công\r\n            SwingUtilities.invokeLater(() -> {\r\n                this.main= new Main();\r\n                startWindow = new StartWindow(this.main, this); // Truyền Clientnew  vào Main\r\n                startWindow.setVisible(true); // Hiển thị StartWindow\r\n            });\r\n\r\n            // Tạo luồng nhận nước đi từ đối thủ\r\n            new Thread(() -> {\r\n                String message;\r\n                try {\r\n                    while ((message = in.readLine()) != null) {\r\n                        if (message.startsWith(\"GAME_START\")) {\r\n                            roomId = message.split(\" \")[1]; // Lưu ID phòng\r\n\r\n                            System.out.println(\"Game started in room: \" + roomId);\r\n                            SwingUtilities.invokeLater(() -> {\r\n                                startWindow.enablePlayButton(); // Kích hoạt nút\r\n                                if (this.onOpponentFound != null) {\r\n                                    this.onOpponentFound.run(); // Gọi phương thức onOpponentFound\r\n                                }\r\n                            });\r\n                        } else if (message.startsWith(\"MOVE\")) {\r\n                            updateBoard(message.substring(5));\r\n                        }\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }).start();\r\n\r\n            // Gửi nước đi từ console\r\n            String userInput;\r\n            while ((userInput = console.readLine()) != null) {\r\n                sendMove(userInput); // Gửi nước đi tới server\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public void sendMessage(String message) {\r\n        if (out != null) {\r\n            out.println(message);\r\n        }\r\n    }\r\n    public void findOpponent() {\r\n        // Gửi yêu cầu tìm đối thủ đến server\r\n        sendMessage(\"FIND_OPPONENT\");\r\n    }\r\n\r\n    public void setOnOpponentFound(Runnable onOpponentFound) {\r\n        this.onOpponentFound = onOpponentFound;\r\n    }\r\n\r\n    // Gọi phương thức này khi nhận được thông báo từ server về việc tìm thấy đối thủ\r\n    public void notifyOpponentFound() {\r\n        if (onOpponentFound != null) {\r\n            onOpponentFound.run();\r\n        }\r\n    }\r\n    // Phương thức gửi nước đi tới server\r\n    public void sendMove(String move) {\r\n        out.println(\"MOVE \" + roomId + \" \" + move); // Gửi nước đi kèm ID phòng\r\n        out.flush();\r\n    }\r\n\r\n    private void updateBoard(String move) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            startWindow.updateBoard(move); // Cập nhật bàn cờ trong StartWindow\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/chess/src/Client.java b/chess/src/Client.java
--- a/chess/src/Client.java	(revision 2eec871257fd967b5c992676c543162b21b2392f)
+++ b/chess/src/Client.java	(date 1731520829313)
@@ -1,102 +1,107 @@
-import javax.swing.*;
-import java.io.*;
-import java.net.*;
-public class Client {
-    private static final String SERVER_ADDRESS = "localhost";
-    private static final int PORT = 12345;
-    private StartWindow startWindow;
-    private PrintWriter out; // Khai báo biến out
-    private Runnable onOpponentFound;
-    private Main main;
-    private String roomId;
+    import javax.swing.*;
+    import java.io.*;
+    import java.net.*;
+    public class Client {
+        private static final String SERVER_ADDRESS = "localhost";
+        private static final int PORT = 12345;
+        private StartWindow startWindow;
+        private PrintWriter out; // Khai báo biến out
+        private Runnable onOpponentFound;
+        private Main main;
+        private String roomId;
 
 
-    public static void main(String[] args) {
-        Client client = new Client();
+        public static void main(String[] args) {
+            Client client = new Client();
 
-        client.start();
-    }
+            client.start();
+        }
 
 
 
-    private void start() {
-        try (Socket socket = new Socket(SERVER_ADDRESS, PORT);
-             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
-             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
-             BufferedReader console = new BufferedReader(new InputStreamReader(System.in))) {
+        private void start() {
+            try (Socket socket = new Socket(SERVER_ADDRESS, PORT);
+                 BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
+                 PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
+                 BufferedReader console = new BufferedReader(new InputStreamReader(System.in))) {
 
-            // Gán giá trị cho biến out
-            this.out = out;
+                // Gán giá trị cho biến out
+                this.out = out;
 
-            // Mở cửa sổ StartWindow khi kết nối thành công
-            SwingUtilities.invokeLater(() -> {
-                this.main= new Main();
-                startWindow = new StartWindow(this.main, this); // Truyền Clientnew  vào Main
-                startWindow.setVisible(true); // Hiển thị StartWindow
-            });
+                // Mở cửa sổ StartWindow khi kết nối thành công
+                SwingUtilities.invokeLater(() -> {
+                    this.main= new Main();
+                    startWindow = new StartWindow(this.main, this); // Truyền Clientnew  vào Main
+                    startWindow.setVisible(true); // Hiển thị StartWindow
+                });
 
-            // Tạo luồng nhận nước đi từ đối thủ
-            new Thread(() -> {
-                String message;
-                try {
-                    while ((message = in.readLine()) != null) {
-                        if (message.startsWith("GAME_START")) {
-                            roomId = message.split(" ")[1]; // Lưu ID phòng
+                // Tạo luồng nhận nước đi từ đối thủ
+                new Thread(() -> {
+                    String message;
+                    try {
+                        while ((message = in.readLine()) != null) {
+                            if (message.startsWith("GAME_START")) {
+                                roomId = message.split(" ")[1]; // Lưu ID phòng
 
-                            System.out.println("Game started in room: " + roomId);
-                            SwingUtilities.invokeLater(() -> {
-                                startWindow.enablePlayButton(); // Kích hoạt nút
-                                if (this.onOpponentFound != null) {
-                                    this.onOpponentFound.run(); // Gọi phương thức onOpponentFound
-                                }
-                            });
-                        } else if (message.startsWith("MOVE")) {
-                            updateBoard(message.substring(5));
-                        }
-                    }
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
-            }).start();
+                                System.out.println("Game started in room: " + roomId);
+                                SwingUtilities.invokeLater(() -> {
+                                    startWindow.enablePlayButton(); // Kích hoạt nút
+                                    if (this.onOpponentFound != null) {
+                                        this.onOpponentFound.run(); // Gọi phương thức onOpponentFound
+                                    }
+                                });
+                            } else if (message.startsWith("MOVE")) {
+                                updateBoard(message.substring(5));
+                            }
+                        }
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                }).start();
 
-            // Gửi nước đi từ console
-            String userInput;
-            while ((userInput = console.readLine()) != null) {
-                sendMove(userInput); // Gửi nước đi tới server
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-    }
-    public void sendMessage(String message) {
-        if (out != null) {
-            out.println(message);
-        }
-    }
-    public void findOpponent() {
-        // Gửi yêu cầu tìm đối thủ đến server
-        sendMessage("FIND_OPPONENT");
-    }
+                // Gửi nước đi từ console
+                String userInput;
+                while ((userInput = console.readLine()) != null) {
+                    sendMove(userInput); // Gửi nước đi tới server
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        public void sendMessage(String message) {
+            if (out != null) {
+                System.out.println("Sent message to client: " + message);  // Kiểm tra thông điệp gửi đi
+                out.println(message);
+            } else {
+                System.out.println("Out stream is null, cannot send message.");
+            }
+        }
+        public void findOpponent() {
+            // Gửi yêu cầu tìm đối thủ đến server
+            sendMessage("FIND_OPPONENT");
+        }
 
-    public void setOnOpponentFound(Runnable onOpponentFound) {
-        this.onOpponentFound = onOpponentFound;
-    }
+        public void setOnOpponentFound(Runnable onOpponentFound) {
+            this.onOpponentFound = onOpponentFound;
+        }
 
-    // Gọi phương thức này khi nhận được thông báo từ server về việc tìm thấy đối thủ
-    public void notifyOpponentFound() {
-        if (onOpponentFound != null) {
-            onOpponentFound.run();
-        }
-    }
-    // Phương thức gửi nước đi tới server
-    public void sendMove(String move) {
-        out.println("MOVE " + roomId + " " + move); // Gửi nước đi kèm ID phòng
-        out.flush();
-    }
+        // Gọi phương thức này khi nhận được thông báo từ server về việc tìm thấy đối thủ
+        public void notifyOpponentFound() {
+            if (onOpponentFound != null) {
+                onOpponentFound.run();
+            }
+        }
+        // Phương thức gửi nước đi tới server
+        public void sendMove(String move) {
+            if (roomId != null) {
+                out.println("MOVE " + roomId + " " + move); // Gửi nước đi cùng ID phòng
+                out.flush();
+            }
+        }
 
-    private void updateBoard(String move) {
-        SwingUtilities.invokeLater(() -> {
-            startWindow.updateBoard(move); // Cập nhật bàn cờ trong StartWindow
-        });
-    }
-}
+        private void updateBoard(String move) {
+            SwingUtilities.invokeLater(() -> {
+                startWindow.updateBoard(move); // Cập nhật bàn cờ trong StartWindow
+            });
+        }
+    }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"656a524f-5cac-4d1e-a2b2-cc0005eeceb1\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/doancn.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/Board$1.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/Board$2.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/Board$MovePair.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/Board.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/King.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/Piece.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/chot.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/ma.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/phao.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/si.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/tuong.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/xe.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/chess/src/AI/Board.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/chess/src/AI/Board.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/doancn/AI/Board$1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/doancn/AI/Board$1.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/doancn/AI/Board$MovePair.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/doancn/AI/Board$MovePair.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/doancn/AI/Board.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/doancn/AI/Board.class\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\"><![CDATA[{\r\n  \"lastFilter\": {\r\n    \"state\": \"OPEN\",\r\n    \"assignee\": \"SeamussK\"\r\n  }\r\n}]]></component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/binh2401/doancn.git\",\r\n    \"accountId\": \"f1471a14-9cc3-47a2-b4b9-accb54996364\"\r\n  }\r\n}]]></component>\r\n  <component name=\"ProjectColorInfo\"><![CDATA[{\r\n  \"customColor\": \"\",\r\n  \"associatedIndex\": 6\r\n}]]></component>\r\n  <component name=\"ProjectId\" id=\"2onnCvAgRSnfJJygv6X6eTtPsTK\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Client.executor\": \"Run\",\r\n    \"Application.Server.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"kotlin-language-version-configured\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\" selected=\"Application.Client\">\r\n    <configuration name=\"Client 2\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Client\" />\r\n      <module name=\"doancn\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Client\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Client\" />\r\n      <module name=\"doancn\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Server\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"network.Server\" />\r\n      <module name=\"doancn\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.Server\" />\r\n      <item itemvalue=\"Application.Client\" />\r\n      <item itemvalue=\"Application.Client 2\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"656a524f-5cac-4d1e-a2b2-cc0005eeceb1\" name=\"Changes\" comment=\"\" />\r\n      <created>1731514083676</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1731514083676</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2eec871257fd967b5c992676c543162b21b2392f)
+++ b/.idea/workspace.xml	(date 1731524316349)
@@ -4,27 +4,22 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="656a524f-5cac-4d1e-a2b2-cc0005eeceb1" name="Changes" comment="">
+    <list default="true" id="5a9b1452-b36b-4dc4-9c69-664b26b5838b" name="Changes" comment="">
       <change afterPath="$PROJECT_DIR$/doancn.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/Board$1.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/Board$2.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/Board$MovePair.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/Board.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/King.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/Piece.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/chot.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/ma.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/phao.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/si.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/tuong.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH_[Changes]/xe.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13_11_2024_10_36_CH__Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/chess/src/AI/Board.java" beforeDir="false" afterPath="$PROJECT_DIR$/chess/src/AI/Board.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/doancn/AI/Board$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/doancn/AI/Board$1.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/doancn/AI/Board$MovePair.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/doancn/AI/Board$MovePair.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/doancn/AI/Board.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/doancn/AI/Board.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/chess/src/Client.java" beforeDir="false" afterPath="$PROJECT_DIR$/chess/src/Client.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/chess/src/network/ClientHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/chess/src/network/ClientHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/chess/src/network/GameRoom.java" beforeDir="false" afterPath="$PROJECT_DIR$/chess/src/network/GameRoom.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/chess/src/network/Server.java" beforeDir="false" afterPath="$PROJECT_DIR$/chess/src/network/Server.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/doancn/Board$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/doancn/Board$2.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/doancn/Board$Move.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/doancn/Board$MovePair.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/doancn/Board.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/doancn/Client.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/doancn/Client.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/doancn/network/ClientHandler.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/doancn/network/ClientHandler.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/doancn/network/GameRoom.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/doancn/network/GameRoom.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/doancn/network/Server.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/doancn/network/Server.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -37,26 +32,28 @@
   <component name="GitHubPullRequestSearchHistory"><![CDATA[{
   "lastFilter": {
     "state": "OPEN",
-    "assignee": "SeamussK"
+    "assignee": "binh2401"
   }
 }]]></component>
   <component name="GithubPullRequestsUISettings"><![CDATA[{
   "selectedUrlAndAccountId": {
     "url": "https://github.com/binh2401/doancn.git",
-    "accountId": "f1471a14-9cc3-47a2-b4b9-accb54996364"
+    "accountId": "df78a172-c60b-4e92-89a6-55dc890ff87f"
   }
 }]]></component>
   <component name="ProjectColorInfo"><![CDATA[{
   "customColor": "",
   "associatedIndex": 6
 }]]></component>
-  <component name="ProjectId" id="2onnCvAgRSnfJJygv6X6eTtPsTK" />
+  <component name="ProjectId" id="2ontcf1mnQZwrvbDwQ7SDDBd7cr" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
+    "Application.1.executor": "Run",
+    "Application.2.executor": "Run",
     "Application.Client.executor": "Run",
     "Application.Server.executor": "Run",
     "RunOnceActivity.ShowReadmeOnStart": "true",
@@ -65,42 +62,56 @@
     "kotlin-language-version-configured": "true"
   }
 }]]></component>
-  <component name="RunManager" selected="Application.Client">
-    <configuration name="Client 2" type="Application" factoryName="Application">
+  <component name="RunManager" selected="Application.Server">
+    <configuration name="1" type="Application" factoryName="Application">
       <option name="MAIN_CLASS_NAME" value="Client" />
       <module name="doancn" />
       <method v="2">
         <option name="Make" enabled="true" />
+        <option name="com.soywiz.korge.intellij.UpdateResourceBeforeRunTask" enabled="false" />
       </method>
     </configuration>
-    <configuration name="Client" type="Application" factoryName="Application">
+    <configuration name="2" type="Application" factoryName="Application">
       <option name="MAIN_CLASS_NAME" value="Client" />
       <module name="doancn" />
       <method v="2">
         <option name="Make" enabled="true" />
+        <option name="com.soywiz.korge.intellij.UpdateResourceBeforeRunTask" enabled="false" />
       </method>
     </configuration>
-    <configuration name="Server" type="Application" factoryName="Application">
+    <configuration name="Server" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="network.Server" />
       <module name="doancn" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="network.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
       <method v="2">
         <option name="Make" enabled="true" />
+        <option name="com.soywiz.korge.intellij.UpdateResourceBeforeRunTask" enabled="false" />
       </method>
     </configuration>
     <list>
+      <item itemvalue="Application.1" />
+      <item itemvalue="Application.2" />
       <item itemvalue="Application.Server" />
-      <item itemvalue="Application.Client" />
-      <item itemvalue="Application.Client 2" />
     </list>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Application.Server" />
+      </list>
+    </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="656a524f-5cac-4d1e-a2b2-cc0005eeceb1" name="Changes" comment="" />
-      <created>1731514083676</created>
+      <changelist id="5a9b1452-b36b-4dc4-9c69-664b26b5838b" name="Changes" comment="" />
+      <created>1731517248386</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
-      <updated>1731514083676</updated>
+      <updated>1731517248386</updated>
     </task>
     <servers />
   </component>
Index: doancn.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/doancn.iml b/doancn.iml
new file mode 100644
--- /dev/null	(date 1731517264528)
+++ b/doancn.iml	(date 1731517264528)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/chess/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
